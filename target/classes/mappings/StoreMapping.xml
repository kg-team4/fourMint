<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="StoreDAO">

	<resultMap type="store" id="storeResult">
		<result property="store_seq" column="STORE_SEQ" />
		<result property="img_name" column="IMG_NAME" />
		<result property="category_big" column="CATEGORY_BIG" />
		<result property="product_name" column="PRODUCT_NAME" />
		<result property="product_price" column="PRODUCT_PRICE" />
		<result property="product_content" column="PRODUCT_CONTENT" />
		<result property="product_stock" column="PRODUCT_STOCK" />
		<result property="url" column="URL" />
		<result property="date" column="DATE" />
	</resultMap>
	
	<select id="getStoreList" resultType="store" parameterType="int">
		<![CDATA[SELECT * FROM (SELECT (row_number() over()) AS rnum, * FROM storeboard) AS b WHERE rnum >= #{startRow} AND rnum <= #{endRow}]]> 
	</select>
	
	<select id="getStoreCount" resultType="int">
		SELECT count(product_name) FROM storeBoard
	</select>
	
	<resultMap type="storeCategoryBig" id="storeCategoryBigResult">
		<result property="num" column="NUM" />
		<result property="name" column="NAME" />
	</resultMap>
	
	<select resultType="storeCategoryBig" id="getStoreCategoryBig">
		SELECT * FROM store_category_big ORDER BY num ASC
	</select>
	
	<insert id="insertStore" parameterType="store">
		INSERT INTO storeBoard VALUES(DEFAULT, #{img_name}, #{category_big}, #{product_name}, #{product_price}, #{product_content}, #{product_stock}, #{url}, now() at time zone 'Asia/Seoul')
	</insert>
	
	<select id="getKindCount" resultType="int" parameterType="four.mint.web.user.board.common.SearchVO">
		SELECT count(product_name) FROM (SELECT * FROM storeBoard 
		<if test='!keyword.equals("%%")'>
			<if test='option.equals("title")'>
				WHERE product_name LIKE #{keyword} 
			</if>
		</if>
		) AS a WHERE category_big = #{kind}
	</select>
	
	<select id="getKindList" resultType="store" parameterType="four.mint.web.user.board.common.SearchVO">
		<![CDATA[SELECT * FROM (SELECT (row_number() over()) AS rnum, * FROM (SELECT * FROM (SELECT * FROM storeBoard]]>
		<if test='!keyword.equals("%%")'>
			<if test='option.equals("title")'>
				WHERE product_name LIKE #{keyword} 
			</if>
		</if>
		<![CDATA[) AS a WHERE category_big = #{kind} ORDER BY store_seq DESC) AS c) AS b WHERE rnum >= (#{page} * 9 - 8) AND rnum <= (#{page} * 9)]]> 
	</select>
	
	<select id="getStoreOne" resultType="store" parameterType="int">
		SELECT * FROM storeBoard WHERE store_seq = #{seq}
	</select>
	
	<select id="getTransactionHistoryOne" resultType="store" parameterType="store">
		SELECT product_name, transaction_count as product_stock FROM transactionHistory WHERE product_name = #{product_name} AND transaction_seq = #{transaction_seq}
	</select>
	
	<select id="getStoreListSix" resultType="store">
		SELECT * FROM storeBoard ORDER BY store_seq DESC LIMIT 6;
	</select>
	
	<!-- 취소 시 재고 증가 -->
	<select id="plusStock" parameterType="store">
		UPDATE storeBoard SET product_stock = product_stock + #{product_stock} WHERE product_name = #{product_name}
	</select>
	
	<select id="getBest" resultType="store">
		SELECT a.store_seq, a.category_big, a.product_name, a.product_price, a.url FROM (SELECT * FROM storeboard) AS a 
		JOIN (SELECT count(*), product_name FROM transactionhistory GROUP BY product_name ORDER BY count DESC LIMIT 6) AS b 
		ON a.product_name = b.product_name ORDER BY count DESC; 
	</select>
	
	<select id="getCategoryBig" resultType="int">
		SELECT COUNT(*) FROM storeBoard GROUP BY category_big
	</select>
	
	<resultMap type="cart" id="cartResult">
		<result property="cart_id" column="CART_ID" />
		<result property="nickname" column="NICKNAME" />
		<result property="store_seq" column="STORE_SEQ" />
		<result property="product_price" column="PRODUCT_PRICE" />
		<result property="amount" column="AMOUNT" />
		<result property="url" column="URL" />
		<result property="product_name" column="PRODUCT_NAME" />
	</resultMap>
	
	<insert id="insertCart" parameterType="four.mint.web.user.store.CartVO">
		INSERT INTO store_cart VALUES(DEFAULT, #{nickname}, #{store_seq}, #{product_price}, #{amount}, #{url}, #{product_name})
	</insert>
	
	<select id="getCartList" resultType="cart" parameterType="string">
		SELECT * FROM store_cart WHERE nickname = #{nickname} ORDER BY cart_id ASC
	</select>
	
	<update id="updateCart" parameterType="int">
		UPDATE store_cart SET amount = #{amount} WHERE cart_id = #{id}
	</update>
	
	<delete id="deleteCart" parameterType="int">
		DELETE FROM store_cart WHERE cart_id = #{cart_id}
	</delete>
	
	<select id="getCart" parameterType="int" resultType="cart">
		SELECT * FROM store_cart WHERE cart_id = #{cartNum}
	</select>
	
	<update id="updateCartVO" parameterType="cart">
		UPDATE store_cart SET amount = #{amount} WHERE cart_id = #{cart_id} 
	</update>
	
	<select id="getPrice" parameterType="int" resultType="int">
		SELECT (product_price * amount) as sum FROM store_cart WHERE cart_id = #{cart_id}
	</select>
	
	<!-- 결제 내역 -->
	<resultMap type="history" id="historyResult">
		<result property="transaction_seq" column="TRANSACTION_SEQ" />
		<result property="email_id" column="EMAIL_ID" />
		<result property="product_name" column="PRODUCT_NAME" />
		<result property="product_price" column="PRODUCT_PRICE" />
		<result property="transaction_price" column="TRANSACTION_PRICE" />
		<result property="transaction_count" column="TRANSACTION_COUNT" />
		<result property="date" column="DATE" />
		<result property="merchant_uid" column="MERCHANT_UID" />
		<result property="requset" column="REQUEST"/>
		<result property="address2" column="ADDRESS2"/>
		<result property="status" column="STATUS"/>
		<result property="cancel_date" column="CANCEL_DATE"/>
		<result property="cancel_status" column="CANCEL_STATUS"/>
		<result property="cancel_reason" column="CANCEL_REASON"/>
		<result property="pay_cancel" column="PAY_CANCEL"/>
		<result property="url" column="URL"/>
		<result property="store_seq" column="STORE_SEQ"/>
	</resultMap>
	
	<insert id="insertHistory" parameterType="history">
		INSERT INTO transactionHistory (transaction_seq, email_id, product_name, product_price, transaction_price, transaction_count, merchant_uid, request, date, address2, status)
		VALUES (DEFAULT, #{email_id}, #{product_name}, #{product_price}, #{transaction_price}, #{transaction_count}, #{merchant_uid}, #{request}, now() at time zone 'Asia/Seoul', #{address2}, '상품 준비 중')
	</insert>
	
	<update id="minusStock" parameterType="history">
		UPDATE storeBoard set product_stock = (product_stock - #{transaction_count}) where product_name = #{product_name};
	</update>
	
	<select id="getTransactionList" resultType="history" parameterType="string">
		SELECT a.*, b.url, b.store_seq FROM 
		(SELECT * FROM transactionHistory WHERE email_id = #{email_id}) AS a 
		JOIN 
		(SELECT url, product_name, store_seq FROM storeBoard) AS b ON a.product_name = b.product_name ORDER BY array_position(array['상품 준비 중', '상품 배송 중', '상품 배송 완료'], status::TEXT), date DESC
	</select>
	
	<update id="updateCancel" parameterType="history">
		UPDATE transactionHistory SET cancel_date = now(), cancel_status = #{cancel_status}, cancel_reason = #{cancel_reason}, pay_cancel = #{pay_cancel} WHERE transaction_seq = #{transaction_seq}
	</update>
	
	<select id="getTransaction" parameterType="history" resultType="history">
		SELECT * FROM transactionHistory WHERE email_id = #{email_id} AND transaction_seq = #{transaction_seq}
	</select>
	
	<!-- 좋아요 등록 -->
	<resultMap type="storeLike" id="storeLikeResult">
		<result property="seq" column="STORE_SEQ"/>
		<result property="nickname" column="NICKNAME"/>
	</resultMap>
	
	<insert id="insertLike" parameterType="storeLike">
		INSERT INTO storeLike VALUES(#{seq}, #{nickname})
	</insert>
	
	<select id="getLike" parameterType="storeLike" resultType="storeLike">
		SELECT * FROM storeLike WHERE nickname = #{nickname} AND store_seq = #{seq}
	</select>
	
	<select id="deleteLike" parameterType="storeLike">
		DELETE FROM storeLike WHERE nickname = #{nickname} AND store_seq = #{seq}
	</select>
	
	<select id="getStoreLike" parameterType="string" resultType="store">
		SELECT b.store_seq, b.date, b.url, b.product_name, b.product_price FROM (SELECT * FROM storelike WHERE nickname = #{nickname}) AS a JOIN (SELECT * FROM storeBoard) AS b ON a.store_seq = b.store_seq;
	</select>
	
	<select id="searchLikes" parameterType="int" resultType="int">
		SELECT count(*) FROM storeLike WHERE store_seq = #{seq}
	</select>
	
	<!-- 후기 작성용 -->
	<resultMap type="rate" id="rateResult">	
		<result property="rate_seq" column="RATE_SEQ"/>
		<result property="store_seq" column="STORE_SEQ"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="rating" column="RATING"/>
		<result property="content" column="CONTENT"/>
		<result property="date" column="DATE"/>
		<result property="profile" column="PROFILE"/>
	</resultMap>
	
	<insert id="insertRate" parameterType="rate">
		INSERT INTO storeRate(rate_seq, store_seq, nickname, rating, content, date)
		VALUES(DEFAULT, #{store_seq}, #{nickname}, #{rating}, #{content}, now())
	</insert>
	
	<select id="getRateList" resultType="rate" parameterType="int">
		SELECT a.*, b.profile FROM 
		(SELECT * FROM storerate WHERE store_seq = #{seq}) AS a 
		JOIN 
		(SELECT nickname, profile FROM member) AS b 
		ON a.nickname = b.nickname; 
	</select>
	
	<delete id="deleteRate" parameterType="int">
		DELETE FROM storeRate WHERE rate_seq = #{seq}
	</delete>
	
	<!-- 문의사항 -->
	<resultMap type="ask" id="askResult">	
		<result property="ask_seq" column="ASK_SEQ"/>
		<result property="store_seq" column="STORE_SEQ"/>
		<result property="nickname" column="NICKNAME"/>
		<result property="content" column="CONTENT"/>
		<result property="date" column="DATE"/>
		<result property="status" column="STATUS"/>
		<result property="product_name" column="PRODUCT_NAME"/>
		<result property="profile" column="PROFILE"/>
	</resultMap>
	
	<insert id="insertAsk" parameterType="ask">
		INSERT INTO storeAsk(ask_seq, store_seq, nickname, content, date, status, product_name)
		VALUES(DEFAULT, #{store_seq}, #{nickname}, #{content}, now(), 1, #{product_name})
	</insert>
	
	<select id="getAskList" parameterType="ask" resultType="ask">
		SELECT a.*, b.profile FROM 
		(SELECT * FROM storeAsk WHERE store_seq = #{store_seq} AND nickname = #{nickname}) AS a 
		JOIN 
		(SELECT nickname, profile FROM member) AS b ON a.nickname = b.nickname;
	</select>
	
	<delete id="deleteAsk" parameterType="int">
		DELETE FROM storeAsk WHERE ask_seq = #{seq}
	</delete>
	
</mapper>





